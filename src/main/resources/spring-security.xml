<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:b="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置不做安全过滤的资源-->
    <!--关闭过滤器功能-->
    <!--<http pattern="\S*" request-matcher="ciRegex" security="none"/>-->
    <!--  
    <http pattern="/errors/session-expired.jsp" security="none"/>
    <http pattern="/assets/**" security="none"/>
    <http pattern="/errors/*" security="none"/>
    <http pattern="/down/**" security="none"/>
    
    <http pattern="/login.jsp" security="none"/>
    <http pattern="\S*\.(ico|css)" request-matcher="ciRegex" security="none"/>
    <http pattern="/" security="none"/>
    -->
    <http pattern="(.+\.(js|js\?_=.+|jpg|png|css|ttf.*|woff.*))|/login.jsp|/jumpToAli.jsp|/decorators/.+|/errors/.+|jsp/security/role-editMenu.jsp"
          request-matcher="ciRegex" security="none"/>
    <!-- 
	<http pattern="/login.jsp" security="none"/>
	<http pattern="^((?!login).)*$" request-matcher="ciRegex" security="none"/>
	 -->
    <!--
        安全过滤：
            1：servlet-api-provision：是否在servlet3环境中使用security api，false：关闭，会去除SecurityContextHolderAwareRequestFilter
            2：request-matcher：采用哪种方式匹配路径，ciRegex：忽略大小写的正则匹配
            3：pattern：表达式
            4：在自定义的WebSecurityBeanPostProcessor中对默认创建的过滤器链进行了改动
    -->
    <http servlet-api-provision="false" pattern="/**" authentication-manager-ref="authenticationManager">
        <!--
            用户登录配置：
            路径恢复：
                1：always-use-default-target必须设置为false
                2：正常情况下，使用RequestCacheAwareFilter中的RequestCache保存用户的上一步操作
                3：如果session过期或者服务器重启后session丢失，就无法保存上一步操作了，这时，用户登陆后，跳转到default-target-url配置内容
                4：如果在用户名密码验证过后，还要额外做一些操作，比如校验验证码，可以通过配置authentication-success-handler-ref配置自定义的AuthenticationSuccessHandler来实现
        -->
        <form-login login-page="/login.jsp" login-processing-url="/login" username-parameter="userName"
                    password-parameter="password"
                    always-use-default-target="true" default-target-url="/index"
                    authentication-failure-url="/login.jsp"/>

        <!--
            用户退出配置，delete-cookies：退出时，清除JSESSIONID
            开启csrf防护后，必须用post方式提交退出请求
        -->
        <logout delete-cookies="JSESSIONID" logout-url="/logout" logout-success-url="/login.jsp"/>
        <!--
            session管理：
                1：session-fixation-protection：session固化攻击，migrateSession：复制原session中属性到新的session
                2：session过期跳转到invalid-session-url
                3：max-sessions：同一个用户最多同时存在多少个
                4：error-if-maximum-exceeded：超出max-sessions时，如果为true，抛出异常，异常信息保存在session中，为false，前面用户的session被置为过期，跳转到expired-url
        -->
        <session-management session-fixation-protection="migrateSession"
                            invalid-session-url="/errors/session-time-out.jsp">
            <concurrency-control max-sessions="100" expired-url="/errors/session-expired.jsp"
                                 error-if-maximum-exceeded="false"/>
        </session-management>

        <custom-filter ref="characterEncodingFilter" before="SECURITY_CONTEXT_FILTER"/>
        <custom-filter ref="exceptionTranslationFilter" before="EXCEPTION_TRANSLATION_FILTER"/>
        <custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>

        <!--关闭匿名用户功能-->
        <anonymous enabled="false"/>

        <!--
            保存登陆状态配置：
            1、remember-me标签会根据配置生成TokenBasedRememberMeServices（以cookie的方式保存）或者PersistentTokenBasedRememberMeServices（保存在持久层中，如数据库）
            2、生成的这个RememberMeServices的实例会用在UsernamePasswordAuthenticationFilter.successfulAuthentication()和LogoutFilter(AbstractRememberMeServices实现了LogoutHandler接口)
            3、除了上面生成的RememberMeServices的实例外，还会额外增加一个RememberMeAuthenticationFilter，用来实现自动登录
            4、token-validity-seconds：有效秒数，key：用来加密生成token，remember-me-parameter：参数名，remember-me-cookie：cookie名
        -->
        <remember-me key="app-pro" token-validity-seconds="86400" remember-me-parameter="remember-me"
                     remember-me-cookie="remember-me"/>

        <!--跨站请求伪造配置-->
        <csrf disabled="true"/>

        <!--与安全有关的响应头配置-->
        <headers defaults-disabled="true">
            <!--禁用缓存-->
            <cache-control/>
            <!--禁用浏览器的内容嗅探功能-->
            <content-type-options/>
            <!--只允许页面在相同域范围内被嵌套-->
            <frame-options policy="SAMEORIGIN"/>
            <!--浏览器XSS防范，block：发生XSS攻击时，停止渲染页面-->
            <xss-protection block="true"/>
            <!--规定referrer的内容-->
            <referrer-policy policy="same-origin"/>
        </headers>
    </http>

    <!--编码过滤器-->
    <b:bean class="org.springframework.web.filter.CharacterEncodingFilter" id="characterEncodingFilter">
        <b:constructor-arg name="encoding" value="UTF-8"/>
        <b:constructor-arg name="forceEncoding" value="true"/>
    </b:bean>

    <!--安全过滤器-->
    <b:bean id="filterSecurityInterceptor"
            class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <b:property name="rejectPublicInvocations" value="true"/>
        <b:property name="accessDecisionManager" ref="accessDecisionManager"/>
        <b:property name="securityMetadataSource" ref="securityMetadataSourceWrapper"/>
    </b:bean>

    <b:bean id="exceptionTranslationFilter" class="com.gd.basic.security.CustomExceptionTranslationFilter">
        <b:constructor-arg name="authenticationEntryPoint">
            <b:bean class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>
        </b:constructor-arg>
        <b:property name="accessDeniedHandler">
            <b:bean class="com.gd.basic.security.CustomAccessDeniedHandler">
                <b:property name="errorPage" value="./errors/access-denied.jsp"/>
            </b:bean>
        </b:property>
    </b:bean>

    <!--定义accessDecisionManager（管理是否可以进行访问）-->
    <b:bean id="accessDecisionManager" class="com.gd.basic.security.AccessDecisionManagerWrapper">
        <b:constructor-arg>
            <!--AffirmativeBased：只要任何一个Voter通过即可授权访问-->
            <b:bean class="org.springframework.security.access.vote.AffirmativeBased">
                <b:constructor-arg>
                    <b:list>
                        <!--RoleVoter：根据角色名进行判断-->
                        <b:bean class="org.springframework.security.access.vote.RoleVoter">
                            <b:property name="rolePrefix" value=""/>
                        </b:bean>
                    </b:list>
                </b:constructor-arg>
            </b:bean>
        </b:constructor-arg>
    </b:bean>

    <authentication-manager id="authenticationManager">
        <authentication-provider user-service-ref="userDetailsServiceImpl">
            <password-encoder ref="passwordEncoder">
                <salt-source ref="saltSource"/>
            </password-encoder>
        </authentication-provider>
    </authentication-manager>

    <b:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>

    <b:bean id="saltSource" class="org.springframework.security.authentication.dao.SystemWideSaltSource">
        <b:property name="systemWideSalt" value="1q@!"/>
    </b:bean>
</b:beans>